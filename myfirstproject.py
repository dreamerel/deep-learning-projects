# -*- coding: utf-8 -*-
"""myfirstproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IsKHEXAi0RqGmGIhwLjKVIWte4yLh4Im
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf
mnist = tf.keras.datasets.mnist  #28*28 images of hand written digits
(x_train, y_train), (x_test, y_test) = mnist.load_data()

import matplotlib.pyplot as plt
plt.imshow(x_train[1], cmap=plt.cm.binary)
plt.show()

print(x_train[0])

# normalize data
x_train = tf.keras.utils.normalize(x_train, axis=1)
x_test = tf.keras.utils.normalize(x_test, axis=1)

plt.imshow(x_train[1], cmap=plt.cm.binary)
plt.show()

#create model

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation = tf.nn.softmax))


model.compile(optimizer ='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics =  ['accuracy'])
model.fit(x_train, y_train, epochs = 4)

val_loss, val_acc = model.evaluate(x_test, y_test)
print(val_loss, val_acc)

#save the model

model.save('mymodel.model')

new_model = tf.keras.models.load_model('mymodel.model')

#prediction 
import numpy as np

print(np.asarray(x_test).shape)

prediction = new_model.predict(x_test)

print(prediction)

print(np.argmax(prediction[4]))

plt.imshow(x_test[4])

